package com.project.sushi;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Stack;
import java.util.Random;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import com.project.sushi.R;

public class CuttingBoard extends View implements OnTouchListener{

	protected int drawColor = Color.WHITE; 
	protected int size = 7; 
	
	public List<Point> pdrawn = new ArrayList<Point>();
	public Stack<Point> asdf = new Stack<Point>(); 
	public Path path;
	public Drawable circle;
	public TextView scoreboard;
	public ImageView feedback;
	public ImageView recipesBack;
	public TextView totalCut;
	public TextView recipesCreated;
	public Button viewRecipes;
	public MediaPlayer playSound;
	public MediaPlayer mpFail = MediaPlayer.create(getContext(), R.raw.miss);
	private Drawable[] rankingImages; 
	private String[] rankingTitles;
	
	//parameters to manipulate between levels
	private int currentLevel;
	private int sushiSliced;//for a game over / end screen.
	private int sushiDropped;
	private int offset;
	
	private int startY;
	private int startX;
	private int incrementX; 
	private int incrementY; 
	
	private Random random = new Random();
	private Collision col = new Collision(); 
	private boolean checkCollide = false; 
	private boolean addPoint = false; 
	private boolean isFromLeftScreen = true;
	protected boolean gameOver = false;
	
	private int sushiGeneratedStat = 0;
	private int sushiSlicedStat = 0; 
	private int uncuttableSushiCount = 0;
	
	public double totalScore; 
	private HashMap<String, Integer> ingredients = new HashMap<String, Integer>(); //contains what you have cut and haven't changed into recipes
	private ArrayList<Cuttable> recipes ;  //recipes for sushi
	private Random ingRand = new Random(); //random generator to be used with toBeSpawn
	private Cuttable currentCuttable; //current object flying

	
	private int sushiDroppedTotal; 
	int Vx = 0;
	int Vy = 0; 
	
	boolean first = true; 
	boolean enforceRecipeDecrement = false; 
	boolean positiveRecipe = false; 
	
	private int recipesMadeGoal; 
	private int recipesMade = 0; 
	
	private boolean nextLevelFlag; 
	
	//this probably don't need to be up here?
	private ArrayList<Cuttable> toBeSpawn; //array containing missing ingredients for recipes

	public CuttingBoard(Context context) {
		super(context);
		init();
	}
	
	public CuttingBoard(Context context, AttributeSet attrs) {
		super(context, attrs);
		init();
	}
	
	public CuttingBoard(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		init();
	}
	
	protected void init(){
		this.currentCuttable =  new Cuttable("ricebag");
		toBeSpawn = new ArrayList<Cuttable>();
		recipes =  new ArrayList<Cuttable>(); 
		this.setOnTouchListener(this);
		Resources res = getResources();

		circle = res.getDrawable(currentCuttable.getImage());
		if(currentCuttable.getSound() >= 0){
			playSound = MediaPlayer.create(getContext(), currentCuttable.getSound());
		}
	
		startY = random.nextInt(500)+(getWidth()/2); //getHeight()/2; 
		startX = getHeight();
		
		offset = 150; 
		currentLevel = 1;
		sushiSliced = 0;//for a game over / end screen.
		sushiDropped = 0;
		
	
		startY = 0;
		startX = 0;
		incrementX = 0; 
		incrementY = 0; 
		recipesMadeGoal = 2;
		sushiDroppedTotal = 0;
		//add in all possible ingredients with 0
		ingredients.put("shrimp", 0);
		ingredients.put("tempura", 0);
		ingredients.put("ricebag", 0);
		ingredients.put("cookedrice", 0);
		
		ingredients.put("nori", 0);
		ingredients.put("sashimi", 0);
		ingredients.put("rawseaweed", 0);
		ingredients.put("livefish", 0);
		ingredients.put("crab", 0);
		ingredients.put("crabmeat", 0);
		
		ingredients.put("avocado", 0);
		ingredients.put("avocadocut", 0);
		
		//initialize recipes and add in what they need
		HashMap<String, Integer> recipe1 = new HashMap<String, Integer>(); 
		recipe1.put("rawseaweed",1);
		recipe1.put("ricebag",1);
		recipe1.put("avocado",1);
		recipe1.put("crab",1);
		
		HashMap<String, Integer> recipe2 = new HashMap<String, Integer>(); 
		recipe2.put("ricebag",1);
		recipe2.put("livefish",1);
		
		HashMap<String, Integer> recipe3 = new HashMap<String, Integer>(); 
		recipe3.put("ricebag",1);
		recipe3.put("rawseaweed",1);
		recipe3.put("shrimp",1);
		
		HashMap<String, Integer> recipe4 = new HashMap<String, Integer>(); 
		recipe4.put("ricebag",1);
		recipe4.put("livefish",1);
		recipe4.put("crab",1);
		recipe4.put("avocado",1);
		

		//add each recipe into recipes
		recipes.add(new Cuttable("sushi", R.drawable.sushi, recipe1));
		recipes.add(new Cuttable("sashimisushi", R.drawable.sashimisushi, recipe2));
		recipes.add(new Cuttable("tempurasushi", R.drawable.tempurasushi, recipe3));
		recipes.add(new Cuttable("sushi1", R.drawable.sushi1, recipe4));
		
		rankingImages  = new Drawable[]
				{res.getDrawable(R.drawable.rank1),res.getDrawable(R.drawable.rank2), res.getDrawable(R.drawable.rank3),
						res.getDrawable(R.drawable.rank4), res.getDrawable(R.drawable.rank5)};
		
		rankingTitles = new String[]{"Novice Samurai", "Intermediate Samurai", "Advanced Samurai", "Daimyo", "Shogun" };
		nextLevelFlag = false; 
		
	}
	
	@SuppressLint("DrawAllocation")
	protected void onDraw(Canvas canvas){
		final Dialog recipeDialog = new Dialog(getContext());
		recipeDialog.setContentView(R.layout.ingredientlists);
		recipeDialog.setCanceledOnTouchOutside(false);
		// if button is clicked, close the custom dialog
		Button readlist = (Button) recipeDialog.findViewById(R.id.understood);
		readlist.setOnClickListener(new OnClickListener() {
		@Override
		public void onClick(View v) {
				recipeDialog.dismiss();
				MainActivity.setIsPaused(false);		
			}
		});
			
	    viewRecipes.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				recipeDialog.show();
				MainActivity.setIsPaused(true);				}
	    });
	    
		if(first){
			generateStartingPositionAndVelocity();
			first = false; 
		}
		nextLevelFlag = false; 
		//Check for collisions
		if(pdrawn.size() >=2 && addPoint){
				checkCollide = col.checkCollisionsVectors(pdrawn.get(pdrawn.size()-2), pdrawn.get(pdrawn.size()-1), startX+incrementX+offset, startY+incrementY+offset, offset);
				addPoint = false; 
		}
		Paint paintInfo = new Paint();
		Resources res = getResources();
		// Reset the coordinates of the new object if it goes off the screen
		// Note: This is the same instance
		if (startY+incrementY < 0 || startX+incrementX > getWidth() || startY+incrementY > getHeight() || startX+incrementX < 0 || checkCollide) {
			boolean checkProc = currentCuttable.needsProcessing(); 
			if(checkCollide){ //checkCollide = false;
				if(checkProc){
				//switch images
					boolean checkSwitched = currentCuttable.processIngredient(); 
					if(checkSwitched){
						sushiSlicedStat++;
						circle = res.getDrawable(currentCuttable.getImage());
						//increment ingredients b/c it got hit and processed
						ingredients.put(currentCuttable.getPrevName(), ingredients.get(currentCuttable.getPrevName()) + 1); 
						
						double currentScore = col.getScore();
						totalScore += currentScore; // user's total score
						
						sushiSliced++;
						updateScore();
						
						handleCheckNextLevel();
							
						//visual feedback
						if(currentScore > 0 && currentScore < 900){
							feedback.setImageResource(R.drawable.nice);
						}
						else if(currentScore >= 900 && currentScore < 930){
							feedback.setImageResource(R.drawable.goodjob);
						}
						else if(currentScore >= 930 && currentScore < 960){
							feedback.setImageResource(R.drawable.excellent);
						}
						else if(currentScore >= 960 && currentScore < 990){
							feedback.setImageResource(R.drawable.amazing);
						}
						else if(currentScore >= 990 && currentScore <= 1000){
							feedback.setImageResource(R.drawable.perfect);
						}
						playSound.start();

						invalidate();
					}
				}
				if(currentCuttable.hasRecipe()){
					Log.v(currentCuttable.getName(), "entered has recipe collision");
					regenerateSushi(); 
					handleCheckNextLevel(); 
				}
				checkCollide = false;
			}
			else if(startY+incrementY < 0 || startX+incrementX > getWidth() || startY+incrementY > getHeight() || startX+incrementX < 0 ){
				//off screen
				if(currentCuttable.needsProcessing()){
					sushiDropped++;
					sushiDroppedTotal++; 
					if(sushiDropped % 3 ==0 && recipesMade >0){// && sushiDropped > 0){
						sushiDropped = 0; 
						recipesMade--; 
					}
					feedback.setImageResource(R.drawable.tryagain);
					mpFail.start();		
				}
				handleCheckNextLevel();
				regenerateSushi(); 
			}	
		}
		//draws user's finger path
		for(int i = 0; i < pdrawn.size(); i++){
			Point pt = pdrawn.get(i);
			paintInfo.setColor(pt.getColor());
			if(!pt.getFirst() && i != 0){
				canvas.drawLine( (float)pdrawn.get(i-1).getX(), (float)pdrawn.get(i-1).getY(), (float)pt.getX(), (float)pt.getY(),paintInfo);
			}
			else{
				paintInfo.setStrokeWidth(pt.getSize());
			}	
		}	
		
		circle.setBounds(startX+incrementX, startY+incrementY, startX+offset+incrementX+50, startY+offset+incrementY+50);
		circle.draw(canvas);
	}	
	
	
	private void handleCheckNextLevel(){
		if(isWin() && nextLevelFlag == false){
			nextLevelFlag = true; 

			MainActivity.setIsPaused(true);
			
			final Dialog dialog = new Dialog(getContext());
			dialog.setContentView(R.layout.dialog);
			
			int imageNum = (int)Math.floor(Math.log(totalScore / 8000) / Math.log(2.2)) + 1;
			Log.v(Integer.toString(imageNum), "imageNum");
			
			Drawable rankI;
			String title = "";
			if(imageNum >= 5){
				rankI = rankingImages[4];
				title = rankingTitles[4];
			}
			else if(imageNum <0){
				rankI = rankingImages[0];
				title = rankingTitles[0];
			}
			else{
				rankI = rankingImages[imageNum];
				title = rankingTitles[imageNum];
			}

			dialog.setTitle("Level " + currentLevel + " completed!" + " You are now " + title + "!");
			
			
			TextView text = (TextView) dialog.findViewById(R.id.text);
			ImageView rank = (ImageView) dialog.findViewById(R.id.rank);
			rank.setImageDrawable(rankI);
			//check which ranking
			
			int TotalCut = LeaderBoard.loadTotalInt("TOTAL_SUSHI_CUT", this.getContext());
			int SushiGenerated = LeaderBoard.loadTotalInt("TOTAL_SUSHI_GENERATED", this.getContext());
			int totalTime = LeaderBoard.loadRecentInt("TOTAL_PLAYTIME", this.getContext());
			
			text.setText(
					"Current Score:" + totalScore + "\n" +
					"Recipes Made:" + recipesMade + "\n" +
					"Total Cut:" + TotalCut + "\n" +
					"Total Dropped:" + sushiDroppedTotal +"\n"+
					"Total Time:" + (totalTime / 1000) + "\n"
					);
		
			Button nextLevel = (Button) dialog.findViewById(R.id.OKbutton);
			// if button is clicked, close the custom dialog
			nextLevel.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					dialog.dismiss();
					MainActivity.setIsPaused(false);
					nextLevel();
					regenerateSushi();
				}
			});
 
			dialog.show();
		}
	}
	
	private void regenerateSushi(){
		//regenerate sushi b/c off screen
		generateStartingPositionAndVelocity(); 
		Resources res = getResources();
		sushiGeneratedStat++;
		if (currentCuttable.hasRecipe() && currentLevel > 1){
			uncuttableSushiCount++; // increment if we have completed recipe and level > 1
		}
		incrementX = 0; // reset everything
		incrementY = 0; // reset everything
		
		if(currentCuttable.hasRecipe() && checkCollide){
			playSound = MediaPlayer.create(getContext(), R.raw.bladecut);
			playSound.start(); 
			if(this.enforceRecipeDecrement){
				recipesMade--;
			}
			checkCollide = false; 
			for(int i = 0; i < recipes.size(); i++){
				if(recipes.get(i).getName() == currentCuttable.getName()){
					recipes.get(i).decrementCountMade(); 
				}
			}
			handleCheckNextLevel();
		}
		
		if(currentLevel > 1 && isLoss()){
			handleGameOver();
		}
		checkCollide = false; 
		
		//check if there's a recipe that has been fulfilled
		boolean finished = false; //boolean for if there's a recipe finished
		for (int i = 0; i < recipes.size(); i++){
			if(recipes.get(i).checkRecipeMade(ingredients)){
				circle = res.getDrawable(recipes.get(i).getImage()); //make the next the recipe final product
				currentCuttable = recipes.get(i);
				//decrement ingredients by recipe specifications
				Iterator<Entry<String, Integer>> it = (recipes.get(i)).getRecipe().entrySet().iterator(); 
				while(it.hasNext()){
					Map.Entry<String, Integer> pairs = (Map.Entry<String, Integer>)it.next(); 
					ingredients.put(pairs.getKey(), ingredients.get(pairs.getKey()) - pairs.getValue() );
				}
				finished = true; 
				recipesMade++; 
				if(recipesMade > 1){
					enforceRecipeDecrement = true; 
					 
				}
				else if(recipesMade == 1){
					sushiDropped = 0;
				}
				break; 
			}
		}
		
		if (finished == false){
			//need to spawn random ingredient to get any recipe made
			for(int i = 0; i < recipes.size(); i++){
				ArrayList<Cuttable> getTemp = recipes.get(i).getMissingIng(ingredients);
				toBeSpawn.addAll(getTemp);
			}
			int randomIngredient = ingRand.nextInt(toBeSpawn.size());
			currentCuttable = toBeSpawn.get((randomIngredient));
			circle = res.getDrawable(toBeSpawn.get((randomIngredient)).getImage());
			if(currentCuttable.getSound() >= 0){
				playSound = MediaPlayer.create(getContext(), currentCuttable.getSound());
			}
			toBeSpawn = new ArrayList<Cuttable>(); 
		}
		
		invalidate(); 
	}
	
	
	
	private void generateStartingPositionAndVelocity(){
		int yGeneration = random.nextInt(3);
		switch (yGeneration){
			case 0:
				Vy = -(getHeight()/28 + random.nextInt((getHeight()/60)+1)); // reset to default value
				Vx = -(getWidth()/100 + random.nextInt((getWidth()/100)+1));
				startY = getHeight();
				if(random.nextBoolean()){
					isFromLeftScreen = true;
					startX = random.nextInt(getWidth()) / 2;
				}
				else{
					isFromLeftScreen = false;
					startX = random.nextInt(getWidth()) / 2 + getWidth() / 2;
				}
				break; 
			case 1:
				isFromLeftScreen = true;
				startY = random.nextInt(1*getHeight()/3) + (int)(1*getHeight()/3);
				startX = 0; 
				generateVelocityFromWalls();
				break;
			case 2:
				isFromLeftScreen = false; 
				startY = random.nextInt(1*getHeight()/3) + (int)(1*getHeight()/3);
				startX = getWidth(); 
				generateVelocityFromWalls();
				break;
		}
		if(isFromLeftScreen){
			Vx *= -1;
		}
	}
	
	private void generateVelocityFromWalls(){
		Vy = (-1* random.nextInt((int)Math.sqrt( (getHeight() - startY)) / 3) - getHeight()/45);
		Vx = (-(getWidth()/200 + random.nextInt((getWidth()/220)+1)));
	}
	
	public boolean onTouch(View view, MotionEvent event){
		if (event.getAction() == MotionEvent.ACTION_DOWN ) {
			pdrawn.clear();
			Point newP = new Point(event.getX(),event.getY(),drawColor,size, true); 
			pdrawn.add(newP);
			addPoint = true; 
			invalidate();
		}
		else if (event.getAction() == MotionEvent.ACTION_MOVE ) {
			Point newP = new Point(event.getX(),event.getY(),drawColor,size, false); 
			pdrawn.add(newP);
			addPoint = true; 
			invalidate();
		}
		else if (event.getAction() != MotionEvent.ACTION_UP){
			Point newP = new Point(event.getX(),event.getY(),drawColor,size, false); 
			pdrawn.add(newP);
			addPoint = true; 
			invalidate();
		}
		
		
		return true; 
		
	}
	
	public void clearPoints(){
		pdrawn = new ArrayList<Point>(); 
	}

	public void setText(){
		scoreboard.setText(Double.toString(totalScore));
		if(currentLevel > 1){
			recipesBack.setVisibility(ImageView.VISIBLE);
			viewRecipes.setVisibility(Button.VISIBLE);
			totalCut.setText(Integer.toString(sushiSliced));
			recipesCreated.setText(Integer.toString(recipesMade));
		}
		else{
			totalCut.setText(Integer.toString(sushiSliced));
		}
		
	}
	public void updateScore(){
		if(scoreboard != null){
			scoreboard.setText(Double.toString(totalScore)); 
			totalCut.setText(Integer.toString(sushiSliced));
		}
	}
	
	public boolean isWin(){	
		if(currentLevel > 1){
			Log.v(Integer.toString(recipesMade), "recipesMade isWin");
			Log.v(Integer.toString(recipesMadeGoal), "recipesMadeGoal isWin");
			Log.v(Boolean.toString(recipesMade >= this.recipesMadeGoal), "isWin?");
			return (recipesMade >= this.recipesMadeGoal);
		}
		else{
			return (sushiSliced >5);
		}
	}
	
	public boolean isLoss(){
		//can't lose on first level
		return (this.enforceRecipeDecrement == true  && recipesMade == 0 && currentLevel > 1); 
	}
	
	public void nextLevel(){
		//sets variables for the next level
		recipesMade = 0; 
		sushiDropped = 0; 
		if(offset > 18){
			offset -= 5;
		}
		Vy -= 10;
		enforceRecipeDecrement = false; 
		recipesMadeGoal = currentLevel*2; 
		Iterator<Entry<String, Integer>> it = ingredients.entrySet().iterator(); 
		while(it.hasNext()){
			Map.Entry<String, Integer> pairs = (Map.Entry<String, Integer>)it.next(); 
			ingredients.put(pairs.getKey(), 0 );
		}
		currentLevel++;
	}
	
	public void move(){
		//handles cuttable movement across screen
		incrementY += Vy;
		Vy += 1; 
		incrementX += Vx; 
	}
	
	private void handleGameOver(){
		LeaderBoard.saveRecentInt("RECENT_PLAYTIME", this.getContext(), MainActivity.totalMillisecondTime);
					
		// Update Total Playtime
		int totalTime = LeaderBoard.loadRecentInt("TOTAL_PLAYTIME", this.getContext());
		LeaderBoard.saveRecentInt("TOTAL_PLAYTIME", this.getContext(), totalTime + MainActivity.totalMillisecondTime);
			        
		Intent gameOver = new Intent (getContext(), GameOver.class);
		getContext().startActivity(gameOver);
					
		// Update Pieces of Sushi Cut
		LeaderBoard.saveRecentInt("RECENT_SUSHI_CUT", this.getContext(), sushiSlicedStat);
					
		int runningTotalCut = LeaderBoard.loadTotalInt("TOTAL_SUSHI_CUT", this.getContext());
		LeaderBoard.saveTotalInt("TOTAL_SUSHI_CUT", 
							this.getContext(), (runningTotalCut + sushiSlicedStat));
						
		// Update sushi generated cut
		LeaderBoard.saveRecentInt("RECENT_SUSHI_GENERATED", this.getContext(), sushiGeneratedStat);
					
		int runningSushiGenerated = LeaderBoard.loadTotalInt("TOTAL_SUSHI_GENERATED", this.getContext());
		LeaderBoard.saveTotalInt("TOTAL_SUSHI_GENERATED", 
			this.getContext(), (runningSushiGenerated + sushiGeneratedStat));
		
		// Update sushi generated not cut
		LeaderBoard.saveRecentInt("RECENT_UNCUTTABLE_SUSHI_GENERATED", this.getContext(), uncuttableSushiCount);
							
		int runningUncuttableSushiGenerated = LeaderBoard.loadTotalInt(
				"TOTAL_UNCUTTABLE_SUSHI_GENERATED", this.getContext());
		LeaderBoard.saveTotalInt("TOTAL_UNCUTTABLE_SUSHI_GENERATED", 
				this.getContext(), (runningUncuttableSushiGenerated + uncuttableSushiCount));
					
		// Update Recent Score
		LeaderBoard.saveRecentInt("RECENT_SCORE", this.getContext(), ((int) totalScore));
					
		// Update Cumulative Total Score
		int runningTotalScore = LeaderBoard.loadTotalInt("TOTAL_SCORE", this.getContext());
		LeaderBoard.saveTotalInt("TOTAL_SCORE", 
			this.getContext(), (runningTotalScore + ((int) totalScore)));
					
		// Check High Score
		try {
			List<Integer> scoreList = LeaderBoard.getScoresList();
			Integer thresholdScore = scoreList.get(4);
			if (((int) totalScore) > thresholdScore){
				scoreList.set(4, ((int) totalScore));
				LeaderBoard.setScoresList(scoreList);
				LeaderBoard.saveList(scoreList, LeaderBoard.arrayName, this.getContext());
				}
			}
			catch (Exception e) {
				Log.v("Error updating high score: ", e.toString());
		}
	}
	

}
